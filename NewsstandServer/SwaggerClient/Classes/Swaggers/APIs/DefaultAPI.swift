//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DefaultAPI {
    /**
     - parameter netid: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func b64entriesGet(netid: String? = nil, completion: @escaping ((_ data: [DukePersonBase64Entry]?,_ error: Error?) -> Void)) {
        b64entriesGetWithRequestBuilder(netid: netid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /b64entries
     - examples: [{contentType=application/json, example=[ {
  "firstname" : "firstname",
  "role" : "role",
  "gender" : "gender",
  "languages" : [ "languages", "languages" ],
  "netid" : "netid",
  "degree" : "degree",
  "team" : "team",
  "picture" : "picture",
  "lastname" : "lastname",
  "hobbies" : [ "hobbies", "hobbies" ],
  "wherefrom" : "wherefrom",
  "id" : "id",
  "department" : "department",
  "email" : "email"
}, {
  "firstname" : "firstname",
  "role" : "role",
  "gender" : "gender",
  "languages" : [ "languages", "languages" ],
  "netid" : "netid",
  "degree" : "degree",
  "team" : "team",
  "picture" : "picture",
  "lastname" : "lastname",
  "hobbies" : [ "hobbies", "hobbies" ],
  "wherefrom" : "wherefrom",
  "id" : "id",
  "department" : "department",
  "email" : "email"
} ]}]
     - parameter netid: (query)  (optional)

     - returns: RequestBuilder<[DukePersonBase64Entry]> 
     */
    open class func b64entriesGetWithRequestBuilder(netid: String? = nil) -> RequestBuilder<[DukePersonBase64Entry]> {
        let path = "/b64entries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "netid": netid
        ])

        let requestBuilder: RequestBuilder<[DukePersonBase64Entry]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func b64entriesIdGet(_id: String, completion: @escaping ((_ data: DukePersonBase64Entry?,_ error: Error?) -> Void)) {
        b64entriesIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /b64entries/{id}
     - examples: [{contentType=application/json, example={
  "firstname" : "firstname",
  "role" : "role",
  "gender" : "gender",
  "languages" : [ "languages", "languages" ],
  "netid" : "netid",
  "degree" : "degree",
  "team" : "team",
  "picture" : "picture",
  "lastname" : "lastname",
  "hobbies" : [ "hobbies", "hobbies" ],
  "wherefrom" : "wherefrom",
  "id" : "id",
  "department" : "department",
  "email" : "email"
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<DukePersonBase64Entry> 
     */
    open class func b64entriesIdGetWithRequestBuilder(_id: String) -> RequestBuilder<DukePersonBase64Entry> {
        var path = "/b64entries/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DukePersonBase64Entry>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func b64entriesPost(body: DukePersonBase64Entry, completion: @escaping ((_ data: DukePersonBase64Entry?,_ error: Error?) -> Void)) {
        b64entriesPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /b64entries
     - examples: [{contentType=application/json, example={
  "firstname" : "firstname",
  "role" : "role",
  "gender" : "gender",
  "languages" : [ "languages", "languages" ],
  "netid" : "netid",
  "degree" : "degree",
  "team" : "team",
  "picture" : "picture",
  "lastname" : "lastname",
  "hobbies" : [ "hobbies", "hobbies" ],
  "wherefrom" : "wherefrom",
  "id" : "id",
  "department" : "department",
  "email" : "email"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<DukePersonBase64Entry> 
     */
    open class func b64entriesPostWithRequestBuilder(body: DukePersonBase64Entry) -> RequestBuilder<DukePersonBase64Entry> {
        let path = "/b64entries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DukePersonBase64Entry>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     - parameter netid: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func entriesAnonymGet(netid: String? = nil, completion: @escaping ((_ data: [DukePersonEntry]?,_ error: Error?) -> Void)) {
        entriesAnonymGetWithRequestBuilder(netid: netid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /entries_anonym
     - examples: [{contentType=application/json, example=[ {
  "firstname" : "firstname",
  "role" : "role",
  "gender" : "gender",
  "languages" : [ "languages", "languages" ],
  "netid" : "netid",
  "degree" : "degree",
  "team" : "team",
  "picture" : "picture",
  "lastname" : "lastname",
  "hobbies" : [ "hobbies", "hobbies" ],
  "wherefrom" : "wherefrom",
  "id" : "id",
  "department" : "department",
  "email" : "email"
}, {
  "firstname" : "firstname",
  "role" : "role",
  "gender" : "gender",
  "languages" : [ "languages", "languages" ],
  "netid" : "netid",
  "degree" : "degree",
  "team" : "team",
  "picture" : "picture",
  "lastname" : "lastname",
  "hobbies" : [ "hobbies", "hobbies" ],
  "wherefrom" : "wherefrom",
  "id" : "id",
  "department" : "department",
  "email" : "email"
} ]}]
     - parameter netid: (query)  (optional)

     - returns: RequestBuilder<[DukePersonEntry]> 
     */
    open class func entriesAnonymGetWithRequestBuilder(netid: String? = nil) -> RequestBuilder<[DukePersonEntry]> {
        let path = "/entries_anonym"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "netid": netid
        ])

        let requestBuilder: RequestBuilder<[DukePersonEntry]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func entriesAnonymIdDelete(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        entriesAnonymIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /entries_anonym/{id}
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func entriesAnonymIdDeleteWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/entries_anonym/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func entriesAnonymIdGet(_id: String, completion: @escaping ((_ data: DukePersonEntry?,_ error: Error?) -> Void)) {
        entriesAnonymIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /entries_anonym/{id}
     - examples: [{contentType=application/json, example={
  "firstname" : "firstname",
  "role" : "role",
  "gender" : "gender",
  "languages" : [ "languages", "languages" ],
  "netid" : "netid",
  "degree" : "degree",
  "team" : "team",
  "picture" : "picture",
  "lastname" : "lastname",
  "hobbies" : [ "hobbies", "hobbies" ],
  "wherefrom" : "wherefrom",
  "id" : "id",
  "department" : "department",
  "email" : "email"
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<DukePersonEntry> 
     */
    open class func entriesAnonymIdGetWithRequestBuilder(_id: String) -> RequestBuilder<DukePersonEntry> {
        var path = "/entries_anonym/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DukePersonEntry>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter body: (body)       - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func entriesAnonymIdPut(body: DukePersonEntry, _id: String, completion: @escaping ((_ data: DukePersonEntry?,_ error: Error?) -> Void)) {
        entriesAnonymIdPutWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /entries_anonym/{id}
     - examples: [{contentType=application/json, example={
  "firstname" : "firstname",
  "role" : "role",
  "gender" : "gender",
  "languages" : [ "languages", "languages" ],
  "netid" : "netid",
  "degree" : "degree",
  "team" : "team",
  "picture" : "picture",
  "lastname" : "lastname",
  "hobbies" : [ "hobbies", "hobbies" ],
  "wherefrom" : "wherefrom",
  "id" : "id",
  "department" : "department",
  "email" : "email"
}}]
     - parameter body: (body)       - parameter _id: (path)  

     - returns: RequestBuilder<DukePersonEntry> 
     */
    open class func entriesAnonymIdPutWithRequestBuilder(body: DukePersonEntry, _id: String) -> RequestBuilder<DukePersonEntry> {
        var path = "/entries_anonym/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DukePersonEntry>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func entriesAnonymPost(body: DukePersonEntry, completion: @escaping ((_ data: DukePersonEntry?,_ error: Error?) -> Void)) {
        entriesAnonymPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /entries_anonym
     - examples: [{contentType=application/json, example={
  "firstname" : "firstname",
  "role" : "role",
  "gender" : "gender",
  "languages" : [ "languages", "languages" ],
  "netid" : "netid",
  "degree" : "degree",
  "team" : "team",
  "picture" : "picture",
  "lastname" : "lastname",
  "hobbies" : [ "hobbies", "hobbies" ],
  "wherefrom" : "wherefrom",
  "id" : "id",
  "department" : "department",
  "email" : "email"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<DukePersonEntry> 
     */
    open class func entriesAnonymPostWithRequestBuilder(body: DukePersonEntry) -> RequestBuilder<DukePersonEntry> {
        let path = "/entries_anonym"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DukePersonEntry>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func entriesDelete(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        entriesDeleteWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /entries

     - returns: RequestBuilder<Void> 
     */
    open class func entriesDeleteWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/entries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter netid: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func entriesGet(netid: String? = nil, completion: @escaping ((_ data: DukePersonEntry?,_ error: Error?) -> Void)) {
        entriesGetWithRequestBuilder(netid: netid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /entries
     - examples: [{contentType=application/json, example={
  "firstname" : "firstname",
  "role" : "role",
  "gender" : "gender",
  "languages" : [ "languages", "languages" ],
  "netid" : "netid",
  "degree" : "degree",
  "team" : "team",
  "picture" : "picture",
  "lastname" : "lastname",
  "hobbies" : [ "hobbies", "hobbies" ],
  "wherefrom" : "wherefrom",
  "id" : "id",
  "department" : "department",
  "email" : "email"
}}]
     - parameter netid: (query)  (optional)

     - returns: RequestBuilder<DukePersonEntry> 
     */
    open class func entriesGetWithRequestBuilder(netid: String? = nil) -> RequestBuilder<DukePersonEntry> {
        let path = "/entries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "netid": netid
        ])

        let requestBuilder: RequestBuilder<DukePersonEntry>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func entriesIdDelete(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        entriesIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /entries/{id}
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func entriesIdDeleteWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/entries/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func entriesIdGet(_id: String, completion: @escaping ((_ data: DukePersonEntry?,_ error: Error?) -> Void)) {
        entriesIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /entries/{id}
     - examples: [{contentType=application/json, example={
  "firstname" : "firstname",
  "role" : "role",
  "gender" : "gender",
  "languages" : [ "languages", "languages" ],
  "netid" : "netid",
  "degree" : "degree",
  "team" : "team",
  "picture" : "picture",
  "lastname" : "lastname",
  "hobbies" : [ "hobbies", "hobbies" ],
  "wherefrom" : "wherefrom",
  "id" : "id",
  "department" : "department",
  "email" : "email"
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<DukePersonEntry> 
     */
    open class func entriesIdGetWithRequestBuilder(_id: String) -> RequestBuilder<DukePersonEntry> {
        var path = "/entries/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DukePersonEntry>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter body: (body)       - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func entriesIdPut(body: DukePersonEntry, _id: String, completion: @escaping ((_ data: DukePersonEntry?,_ error: Error?) -> Void)) {
        entriesIdPutWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /entries/{id}
     - examples: [{contentType=application/json, example={
  "firstname" : "firstname",
  "role" : "role",
  "gender" : "gender",
  "languages" : [ "languages", "languages" ],
  "netid" : "netid",
  "degree" : "degree",
  "team" : "team",
  "picture" : "picture",
  "lastname" : "lastname",
  "hobbies" : [ "hobbies", "hobbies" ],
  "wherefrom" : "wherefrom",
  "id" : "id",
  "department" : "department",
  "email" : "email"
}}]
     - parameter body: (body)       - parameter _id: (path)  

     - returns: RequestBuilder<DukePersonEntry> 
     */
    open class func entriesIdPutWithRequestBuilder(body: DukePersonEntry, _id: String) -> RequestBuilder<DukePersonEntry> {
        var path = "/entries/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DukePersonEntry>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func entriesPost(body: DukePersonEntry, completion: @escaping ((_ data: DukePersonEntry?,_ error: Error?) -> Void)) {
        entriesPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /entries
     - examples: [{contentType=application/json, example={
  "firstname" : "firstname",
  "role" : "role",
  "gender" : "gender",
  "languages" : [ "languages", "languages" ],
  "netid" : "netid",
  "degree" : "degree",
  "team" : "team",
  "picture" : "picture",
  "lastname" : "lastname",
  "hobbies" : [ "hobbies", "hobbies" ],
  "wherefrom" : "wherefrom",
  "id" : "id",
  "department" : "department",
  "email" : "email"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<DukePersonEntry> 
     */
    open class func entriesPostWithRequestBuilder(body: DukePersonEntry) -> RequestBuilder<DukePersonEntry> {
        let path = "/entries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DukePersonEntry>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func healthGet(completion: @escaping ((_ data: Status?,_ error: Error?) -> Void)) {
        healthGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /health
     - examples: [{contentType=application/json, example={
  "details" : [ "details", "details" ],
  "status" : "status",
  "timestamp" : "timestamp"
}}]

     - returns: RequestBuilder<Status> 
     */
    open class func healthGetWithRequestBuilder() -> RequestBuilder<Status> {
        let path = "/health"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Status>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func loginGet(completion: @escaping ((_ data: UserAuth?,_ error: Error?) -> Void)) {
        loginGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /login
     - examples: [{contentType=application/json, example={
  "password" : "password",
  "id" : "id"
}}]

     - returns: RequestBuilder<UserAuth> 
     */
    open class func loginGetWithRequestBuilder() -> RequestBuilder<UserAuth> {
        let path = "/login"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserAuth>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logoutGet(completion: @escaping ((_ data: UserAuth?,_ error: Error?) -> Void)) {
        logoutGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /logout
     - examples: [{contentType=application/json, example={
  "password" : "password",
  "id" : "id"
}}]

     - returns: RequestBuilder<UserAuth> 
     */
    open class func logoutGetWithRequestBuilder() -> RequestBuilder<UserAuth> {
        let path = "/logout"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserAuth>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pictureDelete(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pictureDeleteWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /picture

     - returns: RequestBuilder<Void> 
     */
    open class func pictureDeleteWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/picture"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter netid: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pictureGet(netid: String? = nil, completion: @escaping ((_ data: [Picture]?,_ error: Error?) -> Void)) {
        pictureGetWithRequestBuilder(netid: netid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /picture
     - examples: [{contentType=application/json, example=[ {
  "path" : "path",
  "size" : 0,
  "netid" : "netid",
  "id" : "id",
  "md5" : "md5"
}, {
  "path" : "path",
  "size" : 0,
  "netid" : "netid",
  "id" : "id",
  "md5" : "md5"
} ]}]
     - parameter netid: (query)  (optional)

     - returns: RequestBuilder<[Picture]> 
     */
    open class func pictureGetWithRequestBuilder(netid: String? = nil) -> RequestBuilder<[Picture]> {
        let path = "/picture"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "netid": netid
        ])

        let requestBuilder: RequestBuilder<[Picture]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func picturePost(body: PictureJSON, completion: @escaping ((_ data: Picture?,_ error: Error?) -> Void)) {
        picturePostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /picture
     - examples: [{contentType=application/json, example={
  "path" : "path",
  "size" : 0,
  "netid" : "netid",
  "id" : "id",
  "md5" : "md5"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<Picture> 
     */
    open class func picturePostWithRequestBuilder(body: PictureJSON) -> RequestBuilder<Picture> {
        let path = "/picture"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Picture>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func previewGet(completion: @escaping ((_ data: [DukePersonEntryWeb]?,_ error: Error?) -> Void)) {
        previewGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /preview
     - examples: [{contentType=application/json, example=[ {
  "date" : 0.8008281904610115,
  "displayTime" : "displayTime",
  "firstname" : "firstname",
  "role" : "role",
  "backgroundColorCode" : "backgroundColorCode",
  "netid" : "netid",
  "displayDate" : "displayDate",
  "id" : "id",
  "user" : "user",
  "picture" : "picture",
  "email" : "email",
  "lastname" : "lastname"
}, {
  "date" : 0.8008281904610115,
  "displayTime" : "displayTime",
  "firstname" : "firstname",
  "role" : "role",
  "backgroundColorCode" : "backgroundColorCode",
  "netid" : "netid",
  "displayDate" : "displayDate",
  "id" : "id",
  "user" : "user",
  "picture" : "picture",
  "email" : "email",
  "lastname" : "lastname"
} ]}]

     - returns: RequestBuilder<[DukePersonEntryWeb]> 
     */
    open class func previewGetWithRequestBuilder() -> RequestBuilder<[DukePersonEntryWeb]> {
        let path = "/preview"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[DukePersonEntryWeb]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userIdDelete(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /user/{id}
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func userIdDeleteWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/user/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter body: (body)       - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userIdPut(body: UserAuth, _id: String, completion: @escaping ((_ data: UserAuth?,_ error: Error?) -> Void)) {
        userIdPutWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /user/{id}
     - examples: [{contentType=application/json, example={
  "password" : "password",
  "id" : "id"
}}]
     - parameter body: (body)       - parameter _id: (path)  

     - returns: RequestBuilder<UserAuth> 
     */
    open class func userIdPutWithRequestBuilder(body: UserAuth, _id: String) -> RequestBuilder<UserAuth> {
        var path = "/user/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserAuth>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userPost(body: UserAuth, completion: @escaping ((_ data: UserAuth?,_ error: Error?) -> Void)) {
        userPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /user
     - examples: [{contentType=application/json, example={
  "password" : "password",
  "id" : "id"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<UserAuth> 
     */
    open class func userPostWithRequestBuilder(body: UserAuth) -> RequestBuilder<UserAuth> {
        let path = "/user"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserAuth>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
